module Relations where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; step-‚â°; _‚àé)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _*_)
open import Data.Nat.Properties using (+-comm)


data _‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  z‚â§n : ‚àÄ {n : ‚Ñï} ‚Üí zero ‚â§ n
  s‚â§s : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí suc m ‚â§ suc n

infix 4 _‚â§_

inv-s‚â§s : ‚àÄ {m n : ‚Ñï} ‚Üí suc m ‚â§ suc n ‚Üí m ‚â§ n
inv-s‚â§s (s‚â§s m‚â§n) = m‚â§n

inv-z‚â§n : ‚àÄ {m : ‚Ñï} ‚Üí m ‚â§ zero ‚Üí m ‚â° zero
inv-z‚â§n z‚â§n = refl

{-
Reflexive: For all n, the relation n ‚â§ n holds.
Transitive: For all `m`, `n`, and `p`, if `m ‚â§ n` and `n ‚â§ p` hold, then `m ‚â§ p` holds.
Anti-symmetric: For all `m` and `n`, if both `m ‚â§ n` and `n ‚â§ m` hold, then `m ‚â° n` holds.
Total: For all `m` and `n`, either `m ‚â§ n` or `n ‚â§ m`
-}

{-
  Example of a preorder that is not a partial order.
  (‚äê, {1,2,3})
  =
  {(1,1), (1,2), (2,1), (2,2), (3, 3), (1,3)}

  Example of a partial order that is not a total order.

  (‚äÇ, ùí´({a, b}))
  =
  (‚äÇ, {{}, {a}, {b}, {a, b}})

  {reflxive_tuples..., ({},{a}), ({},{b}), ({},{a, b}), ({a}, {a,b}), ({b}, {a,b})}


#### Exercise `‚â§-antisym-cases` (practice) {#leq-antisym-cases}

The above proof omits cases where one argument is `z‚â§n` and one
argument is `s‚â§s`.  Why is it ok to omit them?

```
They are vacuosly true, i.e (zero <= suc n, suc <= zero) is false in any combinatino
```

-}

-- REFLEXIVITY

‚â§-refl : ‚àÄ {n : ‚Ñï} ‚Üí n ‚â§ n
‚â§-refl {zero} = z‚â§n
‚â§-refl {suc n} = s‚â§s ‚â§-refl

-- Transitivity

‚â§-trans : ‚àÄ {m n p : ‚Ñï} ‚Üí m ‚â§ n ‚Üí n ‚â§ p ‚Üí m ‚â§ p
‚â§-trans z‚â§n       _          =  z‚â§n
‚â§-trans (s‚â§s m‚â§n) (s‚â§s n‚â§p)  =  s‚â§s (‚â§-trans m‚â§n n‚â§p)

‚â§-trans‚Ä≤ : ‚àÄ (m n p : ‚Ñï) ‚Üí m ‚â§ n ‚Üí n ‚â§ p ‚Üí m ‚â§ p
‚â§-trans‚Ä≤ zero    _       _       z‚â§n       _          =  z‚â§n
‚â§-trans‚Ä≤ (suc m) (suc n) (suc p) (s‚â§s m‚â§n) (s‚â§s n‚â§p)  =  s‚â§s (‚â§-trans‚Ä≤ m n p m‚â§n n‚â§p)

-- Anti-symmetric

‚â§-antisym : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí n ‚â§ m ‚Üí m ‚â° n
‚â§-antisym z‚â§n       z‚â§n        =  refl
‚â§-antisym (s‚â§s m‚â§n) (s‚â§s n‚â§m)  =  cong suc (‚â§-antisym m‚â§n n‚â§m)

-- Total

data Total (m n : ‚Ñï) : Set where
  forward : m ‚â§ n ‚Üí Total m n
  flipped : n ‚â§ m ‚Üí Total m n

data Total‚Ä≤ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  forward‚Ä≤ : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí Total‚Ä≤ m n
  flipped‚Ä≤ : ‚àÄ {m n : ‚Ñï} ‚Üí n ‚â§ m ‚Üí Total‚Ä≤ m n

‚â§-total : ‚àÄ (m n : ‚Ñï) ‚Üí Total m n
‚â§-total zero    n                         =  forward z‚â§n
‚â§-total (suc m) zero                      =  flipped z‚â§n
‚â§-total (suc m) (suc n) with ‚â§-total m n
...                        | forward m‚â§n  =  forward (s‚â§s m‚â§n)
...                        | flipped n‚â§m  =  flipped (s‚â§s n‚â§m)

‚â§-total‚Ä≤ : ‚àÄ (m n : ‚Ñï) ‚Üí Total m n
‚â§-total‚Ä≤ zero    n        =  forward z‚â§n
‚â§-total‚Ä≤ (suc m) zero     =  flipped z‚â§n
‚â§-total‚Ä≤ (suc m) (suc n)  =  helper (‚â§-total‚Ä≤ m n)
  where
    helper : Total m n ‚Üí Total (suc m) (suc n)
    helper (forward m‚â§n)  =  forward (s‚â§s m‚â§n)
    helper (flipped n‚â§m)  =  flipped (s‚â§s n‚â§m)

-- Monotonicity

+-mono ≥-‚â§ : ‚àÄ (n p q : ‚Ñï) ‚Üí p ‚â§ q ‚Üí n + p ‚â§ n + q
+-mono ≥-‚â§ zero    p q p‚â§q  =  p‚â§q
+-mono ≥-‚â§ (suc n) p q p‚â§q  =  s‚â§s (+-mono ≥-‚â§ n p q p‚â§q)

+-monoÀ°-‚â§ : ‚àÄ (m n p : ‚Ñï) ‚Üí m ‚â§ n ‚Üí m + p ‚â§ n + p
+-monoÀ°-‚â§ m n p m‚â§n  rewrite +-comm m p | +-comm n p  = +-mono ≥-‚â§ p m n m‚â§n

+-mono-‚â§ : ‚àÄ (m n p q : ‚Ñï) ‚Üí m ‚â§ n ‚Üí p ‚â§ q ‚Üí m + p ‚â§ n + q
+-mono-‚â§ m n p q m‚â§n p‚â§q  =  ‚â§-trans (+-monoÀ°-‚â§ m n p m‚â§n) (+-mono ≥-‚â§ n p q p‚â§q)

{-
#### Exercise `*-mono-‚â§` (stretch)

Show that multiplication is monotonic with regard to inequality.

-}

-- *-mono ≥-‚â§ : ‚àÄ (n p q : ‚Ñï) ‚Üí p ‚â§ q ‚Üí n * p ‚â§ n * q
-- *-mono ≥-‚â§ zero p q p‚â§q = z‚â§n
-- -- *-mono ≥-‚â§ (suc n) p q p‚â§q  =  s‚â§s (+-mono ≥-‚â§ n p q p‚â§q)
-- *-mono ≥-‚â§ (suc n) p q p‚â§q  =  s‚â§s (*-mono ≥-‚â§ n p q p‚â§q)

-- Strict inequality

infix 4 _<_

data _<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  z<s : ‚àÄ {n : ‚Ñï} ‚Üí zero < suc n
  s<s : ‚àÄ {m n : ‚Ñï} ‚Üí m < n ‚Üí suc m < suc n

{-

#### Exercise `<-trans` (recommended) {#less-trans}

Show that strict inequality is transitive.

-}

<-trans : ‚àÄ (m n p : ‚Ñï)
  ‚Üí m < n
  ‚Üí n < p
  --------
  ‚Üí m < p
<-trans zero (suc n) (suc p) z<s _ = z<s
<-trans (suc m) (suc n) (suc p) (s<s n<p) (s<s m<p) = s<s (<-trans m n p n<p m<p)

{-
#### Exercise `trichotomy` (practice) {#trichotomy}

Show that strict inequality satisfies a weak version of trichotomy, in
the sense that for any `m` and `n` that one of the following holds:
  * `m < n`,
  * `m ‚â° n`, or
  * `m > n`.

Define `m > n` to be the same as `n < m`.
You will need a suitable data declaration,
similar to that used for totality.

-}


data Trichotomy (m n : ‚Ñï) : Set where
  leftTr : m < n ‚Üí Trichotomy  m n
  rightTr : n < m ‚Üí Trichotomy m n
  equalTr : m ‚â° n ‚Üí Trichotomy m n

<-trich : ‚àÄ (m n : ‚Ñï) ‚Üí Trichotomy m n
<-trich zero (suc n) = leftTr z<s
<-trich (suc n) zero = rightTr z<s
<-trich zero zero = equalTr refl
<-trich (suc m) (suc n) with <-trich m n
...                     | leftTr  m<n = leftTr (s<s m<n)
...                     | rightTr n<m = rightTr (s<s n<m)
...                     | equalTr m=n = equalTr (cong suc m=n)
-- <-trich (suc m) (suc n) = induct (<-trich m n)
-- where
--   induct : Trichotomy m n ‚Üí Trichotomy (suc m) (suc n)
--   induct = {!!}


{-
#### Exercise `+-mono-<` (practice) {#plus-mono-less}

Show that addition is monotonic with respect to strict inequality.
As with inequality, some additional definitions may be required.

-}

+<-monoR : ‚àÄ (n p q : ‚Ñï)
  ‚Üí p < q
  ----------
  ‚Üí n + p < n + q
+<-monoR zero p q p<q = p<q
+<-monoR (suc n) p q p<q = s<s (+<-monoR n p q p<q)

+<-monoL : ‚àÄ (m n p : ‚Ñï)
  ‚Üí m < n
  ----------
  ‚Üí m + p < n + p
+<-monoL m n p m<n rewrite +-comm m p | +-comm n p = +<-monoR p m n m<n

+<-mono : ‚àÄ (m n p q : ‚Ñï)
  ‚Üí m < n
  ‚Üí p < q
  --------
  ‚Üí m + p < n + q
+<-mono m n p q m<n p<q = <-trans (m + p) (n + p) (n + q) (+<-monoL m n p m<n) (+<-monoR n p q p<q)

{-

#### Exercise `‚â§-iff-<` (recommended) {#leq-iff-less}

Show that `suc m ‚â§ n` implies `m < n`, and conversely.

-}

<-suc : ‚àÄ (n : ‚Ñï) ‚Üí n < suc n
<-suc zero = z<s
<-suc (suc r) = s<s (<-suc r)

<-mono-succ : ‚àÄ {m n : ‚Ñï} ‚Üí m < n ‚Üí m < suc n
<-mono-succ z<s = z<s
<-mono-succ (s<s r) = s<s (<-mono-succ r)


‚â§-impl-< : ‚àÄ (m n : ‚Ñï) ‚Üí suc m ‚â§ n ‚Üí m < n
‚â§-impl-< zero (suc n) (s‚â§s m‚â§n) = z<s {n}
‚â§-impl-< (suc m) (suc n) (s‚â§s m‚â§n) =
  let r = ‚â§-impl-< m n m‚â§n
  in s<s r

-- ‚â§-impl-< zero (suc n) m‚â§n = z<s
-- ‚â§-impl-< (suc m) (suc n) (s‚â§s m‚â§n) = s<s (‚â§-impl-< m n m‚â§n)

<-impl-‚â§ : ‚àÄ {m n : ‚Ñï} ‚Üí m < n ‚Üí suc m ‚â§ n
<-impl-‚â§ z<s = s‚â§s z‚â§n
<-impl-‚â§ (s<s m<n) = s‚â§s (<-impl-‚â§ m<n)
