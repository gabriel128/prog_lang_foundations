module Relations where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)
open import Data.Nat using (‚Ñï; zero; suc; _+_)
open import Data.Nat.Properties using (+-comm)


data _‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  z‚â§n : ‚àÄ {n : ‚Ñï} ‚Üí zero ‚â§ n
  s‚â§s : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí suc m ‚â§ suc n

infix 4 _‚â§_

inv-s‚â§s : ‚àÄ {m n : ‚Ñï} ‚Üí suc m ‚â§ suc n ‚Üí m ‚â§ n
inv-s‚â§s (s‚â§s m‚â§n) = m‚â§n

inv-z‚â§n : ‚àÄ {m : ‚Ñï} ‚Üí m ‚â§ zero ‚Üí m ‚â° zero
inv-z‚â§n z‚â§n = refl

{-
Reflexive: For all n, the relation n ‚â§ n holds.
Transitive: For all `m`, `n`, and `p`, if `m ‚â§ n` and `n ‚â§ p` hold, then `m ‚â§ p` holds.
Anti-symmetric: For all `m` and `n`, if both `m ‚â§ n` and `n ‚â§ m` hold, then `m ‚â° n` holds.
Total: For all `m` and `n`, either `m ‚â§ n` or `n ‚â§ m`
-}

{-
  Example of a preorder that is not a partial order.
  (‚äê, {1,2,3})
  =
  {(1,1), (1,2), (2,1), (2,2), (3, 3), (1,3)}

  Example of a partial order that is not a total order.

  (‚äÇ, ùí´({a, b}))
  =
  (‚äÇ, {{}, {a}, {b}, {a, b}})

  {reflxive_tuples..., ({},{a}), ({},{b}), ({},{a, b}), ({a}, {a,b}), ({b}, {a,b})}


#### Exercise `‚â§-antisym-cases` (practice) {#leq-antisym-cases}

The above proof omits cases where one argument is `z‚â§n` and one
argument is `s‚â§s`.  Why is it ok to omit them?

```
They are vacuosly true, i.e (zero <= suc n, suc <= zero) is false in any combinatino
```

-}
